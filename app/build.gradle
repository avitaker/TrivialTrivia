
plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '2.1.0'
    id 'jacoco'
}
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.avinashdavid.trivialtrivia"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 4
        versionName "1.12"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    play {
        track = 'internal' //'alpha','beta' or 'production'
        serviceAccountCredentials = rootProject.file('modified-key-92e6.json')
        resolutionStrategy = "auto"
        releaseStatus = "completed"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // for locally building release builds
            signingConfig debug.signingConfig
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = true
        }
    }
    testOptions {
        unitTests.all {
           // useJUnitPlatform()
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']

            }
        }
    }
    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.7'
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
        afterTest { desc, result ->
            println "RUNNING  ${desc.name} [${desc.className}] result: ${result.resultType}"
        }
    }
}


task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

